generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  walletAddress String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Project model
model Project {
  id                   String           @id @default(cuid())
  name                 String
  organizationName     String
  imageUrl             String?
  adminAddresses       String[]
  validatorAddresses   String[]
  dataTypes            String[]
  requiredElements     Int
  collectedElements    Int              @default(0)
  totalPrizePool       Float
  distributedPrizePool Float            @default(0)
  contactEmail         String
  description          String?          @db.Text
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  forms                Form[]
  submissions          FormSubmission[]
  dataSubmissions      DataSubmission[]
}

// Form model
model Form {
  id               String           @id @default(cuid())
  name             String
  description      String?          @db.Text
  projectId        String
  project          Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  requiredElements Int?
  prizePool        Float?
  fields           FormField[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  submissions      FormSubmission[]
}

// Form field model
model FormField {
  id        String          @id @default(cuid())
  formId    String
  form      Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  label     String
  type      String // text, number, email, date, select, checkbox, radio, file, textarea
  required  Boolean         @default(false)
  order     Int
  options   String?         @db.Text // JSON string for select, checkbox, radio fields
  fileTypes String[] // For file fields (image/*, video/*, audio/*)
  maxFiles  Int? // For file fields
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  responses FieldResponse[]
}

// Form submission model
model FormSubmission {
  id          String          @id @default(cuid())
  formId      String
  form        Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  projectId   String
  project     Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  submitterId String // Wallet address or user ID
  status      String          @default("pending") // pending, approved, rejected
  notes       String?         @db.Text
  responses   FieldResponse[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

// Field response model
model FieldResponse {
  id           String         @id @default(cuid())
  submissionId String
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  fieldId      String
  field        FormField      @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  textValue    String?        @db.Text
  numberValue  Float?
  booleanValue Boolean?
  dateValue    DateTime?
  fileIds      String[] // References to uploaded files
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

// Data submission model (for direct file uploads)
model DataSubmission {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  submitterId String // Wallet address or user ID
  dataType    String // Type of data submitted (Photos, Videos, Audios, etc.)
  fileUrl     String // URL to the file
  mimeType    String // MIME type of the file
  verified    Boolean  @default(false)
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// File storage model
model File {
  id          String   @id @default(cuid())
  name        String
  url         String
  size        Int
  mimeType    String
  submitterId String // Wallet address or user ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
